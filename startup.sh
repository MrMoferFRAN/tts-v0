#!/bin/bash
# üöÄ RUNPOD CSM VOICE CLONING STARTUP - VERSI√ìN ROBUSTA
# Configurado para: runpod/pytorch:2.1.1-py3.10-cuda12.1.1-devel-ubuntu22.04
# Sistema: CSM-1B nativo de Transformers 4.52.4+
# Incluye: Dependencias de audio (libsndfile, ffmpeg, soundfile, librosa) para backends robustos

set -e  # Exit on any error

echo "üéØ RUNPOD CSM VOICE CLONING - STARTUP ROBUSTO"
echo "============================================================"

# 1. Environment Verification
echo "üîç 1. Verificando entorno del sistema..."
cd /workspace/tts-v0

# Check GPU
nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits | head -1
echo "‚úÖ GPU verification complete"

# 2. Setup environment variables
echo "üîë 2. Configurando variables de entorno..."
# Manejar RunPod Secrets y variables de entorno
if [ -n "$RUNPOD_SECRET_HF_TOKEN" ]; then
    export HF_TOKEN="$RUNPOD_SECRET_HF_TOKEN"
    echo "‚úÖ HF_TOKEN configurado desde RunPod Secret"
elif [ -n "$HF_TOKEN" ]; then
    echo "‚úÖ HF_TOKEN configurado desde variable de entorno"
else
    echo "‚ùå ERROR: HF_TOKEN no configurado"
    echo "üí° Configurar en RunPod usando Secrets: RUNPOD_SECRET_HF_TOKEN"
    echo "üí° O como variable de entorno: HF_TOKEN"
    exit 1
fi

# Configurar autenticaci√≥n de Hugging Face
echo "üîê Configurando autenticaci√≥n de Hugging Face..."
mkdir -p ~/.cache/huggingface
echo "$HF_TOKEN" > ~/.cache/huggingface/token

# Configurar git credentials para Hugging Face
git config --global credential.helper store
echo "https://MrMoferFRAN:$HF_TOKEN@huggingface.co" > ~/.git-credentials

# Tambi√©n configurar usando huggingface-hub
pip install --no-cache-dir huggingface-hub --upgrade
python -c "from huggingface_hub import login; login('$HF_TOKEN')" 2>/dev/null || echo "‚ö†Ô∏è huggingface-hub login failed, using git credentials"

export NO_TORCH_COMPILE=1
export PYTHONPATH="/workspace/tts-v0:$PYTHONPATH"
echo 'export NO_TORCH_COMPILE=1' >> ~/.bashrc
echo 'export PYTHONPATH="/workspace/tts-v0:$PYTHONPATH"' >> ~/.bashrc
echo "‚úÖ Variables de entorno y autenticaci√≥n configuradas"

# 3. INSTALAR DEPENDENCIAS CR√çTICAS PRIMERO
echo "üîß 3. INSTALANDO DEPENDENCIAS CR√çTICAS..."
pip install --no-cache-dir \
    "transformers>=4.52.1" \
    "accelerate>=0.20.0" \
    fastapi \
    uvicorn \
    python-multipart \
    aiofiles \
    --upgrade

echo "‚úÖ Dependencias cr√≠ticas instaladas"

# 3.5. INSTALAR DEPENDENCIAS DE AUDIO (CR√çTICO)
echo "üîä 3.5. INSTALANDO DEPENDENCIAS DE AUDIO..."
echo "üì¶ Instalando librer√≠as de sistema para audio..."

# Instalar librer√≠as de sistema necesarias para torchaudio backends
apt-get update && apt-get install -y \
    libsndfile1 \
    libsndfile1-dev \
    ffmpeg \
    --no-install-recommends

echo "üì¶ Instalando soundfile y librosa para manejo robusto de archivos de audio..."
pip install --no-cache-dir soundfile librosa

# Verificar que los backends de audio est√©n disponibles
echo "üîç Verificando backends de audio..."
python -c "
import torchaudio
backends = torchaudio.list_audio_backends()
print(f'‚úÖ TorchAudio backends disponibles: {backends}')

try:
    import soundfile as sf
    print('‚úÖ SoundFile disponible')
except ImportError:
    print('‚ùå SoundFile no disponible')
    exit(1)

try:
    import librosa
    print('‚úÖ Librosa disponible')
except ImportError:
    print('‚ùå Librosa no disponible')
    exit(1)

if not backends:
    print('‚ùå No hay backends de audio disponibles para torchaudio')
    print('‚ö†Ô∏è  Esto podr√≠a causar errores al guardar archivos de audio')
    exit(1)
else:
    print('‚úÖ Backends de audio configurados correctamente')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Error configurando dependencias de audio"
    exit 1
fi

echo "‚úÖ Dependencias de audio instaladas y verificadas"

# 4. Verificar / descargar modelo CSM-1B (M√âTODO ROBUSTO CON HUGGINGFACE_HUB)
echo "üîç 4. Verificando modelo CSM-1B..."
MODEL_DIR="./models/sesame-csm-1b"

# Verificar si ya existe el modelo completo
if [ -f "$MODEL_DIR/config.json" ] && ls "$MODEL_DIR"/transformers-*-of-*.safetensors 1>/dev/null 2>&1; then
    model_size=$(du -sh "$MODEL_DIR" | cut -f1)
    echo "‚úÖ Modelo CSM-1B encontrado: $model_size"
    echo "üìã Archivos safetensors encontrados:"
    ls -la "$MODEL_DIR"/transformers-*-of-*.safetensors
else
    echo "üîÑ Descargando modelo CSM-1B con huggingface_hub (m√©todo robusto)..."
    
    # Asegurar que huggingface_hub est√© actualizado
    pip install --no-cache-dir huggingface_hub --upgrade
    
    # Crear directorio models si no existe
    mkdir -p models
    
    # Descargar usando huggingface_hub (m√°s robusto que git-lfs)
    python - <<'PY'
import os
from huggingface_hub import snapshot_download

print("üì• Iniciando descarga del modelo CSM-1B...")
print("üîó Repo: sesame/csm-1b")
print("üìÅ Destino: models/sesame-csm-1b")

try:
    snapshot_download(
        repo_id="sesame/csm-1b",
        local_dir="models/sesame-csm-1b",
        local_dir_use_symlinks=False,  # copia real, sin symlinks ‚Üí evita problemas en contenedores
        token=os.environ.get("HF_TOKEN"),
        resume_download=True  # contin√∫a descarga si se interrumpi√≥
    )
    print("‚úÖ Descarga completada exitosamente")
except Exception as e:
    print(f"‚ùå Error durante la descarga: {e}")
    exit(1)
PY

    if [ $? -ne 0 ]; then
        echo "‚ùå Error descargando modelo con huggingface_hub"
        exit 1
    fi
fi

# Verificaci√≥n exhaustiva de archivos cr√≠ticos
echo "üîç Verificando integridad del modelo..."

# Verificar archivos safetensors espec√≠ficos
if ! ls "$MODEL_DIR"/transformers-*-of-*.safetensors 1>/dev/null 2>&1; then
    echo "‚ùå No se han descargado los archivos safetensors"
    echo "üìã Archivos esperados:"
    echo "   - transformers-00001-of-00002.safetensors"
    echo "   - transformers-00002-of-00002.safetensors"
    echo "üìÅ Contenido actual del directorio:"
    ls -la "$MODEL_DIR"/ || echo "Directorio no existe"
    exit 1
fi

# Verificar archivos espec√≠ficos mencionados en el error
required_files=(
    "$MODEL_DIR/transformers-00001-of-00002.safetensors"
    "$MODEL_DIR/transformers-00002-of-00002.safetensors"
    "$MODEL_DIR/config.json"
    "$MODEL_DIR/tokenizer.json"
)

missing_files=()
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo "‚ùå Archivos faltantes:"
    for file in "${missing_files[@]}"; do
        echo "   - $file"
    done
    exit 1
fi

echo "‚úÖ Todos los archivos cr√≠ticos del modelo est√°n presentes:"
echo "üìã Archivos safetensors verificados:"
ls -la "$MODEL_DIR"/transformers-*-of-*.safetensors

# Mostrar tama√±o total del modelo
model_size=$(du -sh "$MODEL_DIR" | cut -f1)
echo "üì¶ Tama√±o total del modelo: $model_size"

# 5. Verificar dataset Elise (opcional)
echo "üîç 5. Verificando dataset Elise..."
if [ -d "./datasets/csm-1b-elise" ]; then
    echo "‚úÖ Dataset Elise CSM ya existe"
else
    echo "‚ö†Ô∏è Dataset Elise no encontrado (opcional)"
fi

# 6. VERIFICAR DEPENDENCIAS PYTHON
echo "üîß 6. VERIFICANDO DEPENDENCIAS PYTHON..."

# Verificar Python packages cr√≠ticos
echo "üì¶ Verificando dependencias cr√≠ticas..."
python -c "
import sys
missing = []

try:
    import torch
    print(f'‚úÖ PyTorch: {torch.__version__}')
except ImportError:
    missing.append('torch>=2.0.0')

try:
    import transformers
    print(f'‚úÖ Transformers: {transformers.__version__}')
    # Verificar que sea una versi√≥n que soporte CSM
    if hasattr(transformers, 'CsmForConditionalGeneration'):
        print('‚úÖ CSM support available')
    else:
        print('‚ùå CSM support not available, need Transformers >= 4.52.1')
        missing.append('transformers>=4.52.1')
except ImportError:
    missing.append('transformers>=4.52.1')

try:
    import fastapi
    print(f'‚úÖ FastAPI: {fastapi.__version__}')
except ImportError:
    missing.append('fastapi')

try:
    import uvicorn
    print(f'‚úÖ Uvicorn available')
except ImportError:
    missing.append('uvicorn')

try:
    import torchaudio
    print(f'‚úÖ TorchAudio: {torchaudio.__version__}')
    
    # Verificar backends de audio
    backends = torchaudio.list_audio_backends()
    print(f'‚úÖ TorchAudio backends: {backends}')
    if not backends:
        print('‚ö†Ô∏è  Sin backends de audio - puede causar problemas')
except ImportError:
    missing.append('torchaudio')

try:
    import soundfile as sf
    print(f'‚úÖ SoundFile: disponible')
except ImportError:
    missing.append('soundfile')

try:
    import librosa
    print(f'‚úÖ Librosa: disponible')
except ImportError:
    missing.append('librosa')

if missing:
    print(f'‚ùå Missing packages: {missing}')
    sys.exit(1)
else:
    print('‚úÖ All critical dependencies available')
"

if [ $? -ne 0 ]; then
    echo "üîß Instalando dependencias faltantes..."
    
    # Instalar Transformers actualizado
    pip install transformers>=4.52.1 --upgrade
    
    # Instalar dependencias de API y audio
    pip install fastapi uvicorn python-multipart aiofiles soundfile librosa
    
    # Verificar instalaci√≥n
    python -c "
from transformers import CsmForConditionalGeneration, AutoProcessor
print('‚úÖ CSM imports working correctly')
"
fi

# 7. Configurar estructura de directorios
echo "üìÅ 7. Configurando estructura de directorios..."
mkdir -p outputs temp logs voices
echo "‚úÖ Directorios creados"

# 8. Verificar archivo de voz de referencia
echo "üîç 8. Verificando archivos de voz de referencia..."
reference_voice_old="voices/fran-fem/Ah, ¬øen serio? Vaya, eso debe ser un poco inc√≥modo para tu equipo. Y ¬øc√≥mo lo tomaron?.wav"
reference_voice_new="voices/fran-fem/fran_fem_sample.wav"

if [ -f "$reference_voice_new" ]; then
    echo "‚úÖ Archivo de referencia encontrado: $reference_voice_new"
elif [ -f "$reference_voice_old" ]; then
    echo "‚ö†Ô∏è Archivo con nombre problem√°tico encontrado, renombrando..."
    cd voices/fran-fem && mv *.wav fran_fem_sample.wav && cd ../..
    echo "‚úÖ Archivo renombrado a: $reference_voice_new"
    
    # Actualizar profiles.json si existe
    if [ -f "voices/fran-fem/profiles.json" ]; then
        echo "üîß Actualizando profiles.json..."
        python -c "
import json
from datetime import datetime

try:
    with open('voices/fran-fem/profiles.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Actualizar path del audio
    if 'profiles' in data and len(data['profiles']) > 0:
        data['profiles'][0]['name'] = 'fran_fem_sample'
        data['profiles'][0]['audio_path'] = '/workspace/tts-v0/voices/fran-fem/fran_fem_sample.wav'
        data['updated_at'] = datetime.now().isoformat()
        
        with open('voices/fran-fem/profiles.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print('‚úÖ profiles.json actualizado')
    else:
        print('‚ö†Ô∏è profiles.json no tiene el formato esperado')
except Exception as e:
    print(f'‚ùå Error actualizando profiles.json: {e}')
"
    fi
else
    echo "‚ö†Ô∏è Archivo de referencia no encontrado"
    echo "üí° El sistema funcionar√°, pero sin perfil de voz predefinido"
fi

# 9. Test robusto del sistema CSM
echo "üîß 9. Probando sistema CSM..."
python -c "
import torch
from transformers import CsmForConditionalGeneration, AutoProcessor
import os

print('üîç Testing CSM system...')
try:
    model_path = './models/sesame-csm-1b'
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    
    # Verificar que los archivos espec√≠ficos existen
    safetensor_files = [
        'transformers-00001-of-00002.safetensors',
        'transformers-00002-of-00002.safetensors'
    ]
    
    print('üîç Verificando archivos safetensors espec√≠ficos...')
    for file in safetensor_files:
        file_path = os.path.join(model_path, file)
        if os.path.exists(file_path):
            size_mb = os.path.getsize(file_path) / (1024*1024)
            print(f'‚úÖ {file}: {size_mb:.1f} MB')
        else:
            print(f'‚ùå {file}: NO ENCONTRADO')
            raise FileNotFoundError(f'Archivo cr√≠tico faltante: {file}')
    
    print(f'üì• Loading processor from {model_path}...')
    processor = AutoProcessor.from_pretrained(model_path)
    
    print(f'üì• Loading model on {device}...')
    model = CsmForConditionalGeneration.from_pretrained(
        model_path,
        device_map=device,
        torch_dtype=torch.float16 if device == 'cuda' else torch.float32
    )
    
    print('‚úÖ CSM system test successful!')
    
    if torch.cuda.is_available():
        gpu_info = torch.cuda.get_device_properties(0)
        memory_gb = gpu_info.total_memory / 1024**3
        print(f'üñ•Ô∏è GPU: {gpu_info.name} ({memory_gb:.1f} GB)')
    
    # Test torch.compiler compatibility
    if not hasattr(torch.compiler, 'is_compiling'):
        print('‚ö†Ô∏è  torch.compiler compatibility patch needed')
    else:
        print('‚úÖ torch.compiler compatible')
    
except Exception as e:
    print(f'‚ùå CSM system test failed: {e}')
    import traceback
    traceback.print_exc()
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå Sistema CSM no funcion√≥ correctamente"
    echo "üîç Informaci√≥n de debugging:"
    echo "üìÅ Contenido del directorio del modelo:"
    ls -la "$MODEL_DIR/" || echo "Directorio no accesible"
    exit 1
fi

# 10. Informaci√≥n del sistema configurado
echo "üìä 10. Informaci√≥n del sistema configurado..."
echo "============================================================"
echo "üé§ CSM VOICE CLONING SYSTEM - READY"
echo "============================================================"
echo "üì¶ Sistema: CSM-1B nativo de Transformers"
echo "ü§ñ Modelo: models/sesame-csm-1b ($(du -sh models/sesame-csm-1b | cut -f1))"
echo "üé≠ Voces: $(ls voices/ 2>/dev/null | wc -l) perfiles disponibles"
echo "üîß API: FastAPI + Uvicorn (voice_api_complete.py)"
echo "üöÄ Puerto: 7860"
echo "‚úÖ Archivos safetensors verificados:"
ls -la "$MODEL_DIR"/transformers-*-of-*.safetensors
echo "============================================================"

# 11. Iniciar API
echo "üöÄ 11. Iniciando CSM Voice Cloning API..."

# Ejecutar API completa
python voice_api_complete.py
